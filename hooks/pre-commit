#!/usr/bin/env python

from __future__ import absolute_import, print_function, unicode_literals

import os
import os.path
import subprocess
from contextlib import contextmanager

GENERATED_FILES = frozenset([
    "ast/basetypeid_string.go",
    "idl/internal/lex.go",
    "idl/internal/y.go",
])

PACKAGES = ['ast', 'idl']


def findup(path, start=None):
    start = start or '.'
    if os.path.exists(os.path.join(start, path)):
        return os.path.realpath(start)
    else:
        return findup(path, os.path.join(start, '..'))

ROOT = findup('.git')
LICENSE_EXEC = os.path.join(ROOT, "node_modules/.bin/uber-licence")


@contextmanager
def chdir(path):
    """Context manager to change directories temporarily."""
    cwd = os.getcwd()
    try:
        os.chdir(path)
        yield
    finally:
        os.chdir(cwd)


def is_generated(path):
    """Whether the file at the given path is a generated file."""
    path = os.path.relpath(path, ROOT)
    return path in GENERATED_FILES


def add_generated_tag(path):
    lines = []
    with open(path, 'rb') as f:
        for line in f:
            line = line.decode('utf-8')
            if 'Code generated by' in line:
                lines = [line, '\n'] + lines
            else:
                lines.append(line)

    with open(path, 'wb') as f:
        for line in lines:
            line = line.encode('utf-8')
            f.write(line)

    print('Generated tag updated for', path)


def ensure_license():
    """Ensures that all files in the current subtree have the license blurb.

    If any of those files are generated files, their generated tag gets moved
    to the top."""
    cwd = os.getcwd()
    proc = subprocess.Popen(
        [LICENSE_EXEC, '--file', '*.go'], stdout=subprocess.PIPE
    )

    with proc.stdout:
        for line in proc.stdout:
            if line.startswith('fixed file'):
                name = line.split("'")[1]
                path = os.path.join(cwd, name)
                print('License added to', path)
                if is_generated(path):
                    # Need to ensure that the 'Code generated by' blurb
                    # remains at the top of the file if GitHub is to ignore
                    # the file in the diff.
                    add_generated_tag(path)

    proc.wait()


if not os.path.exists(LICENSE_EXEC):
    print('uber-licence not installed. Installing')
    with chdir(ROOT):
        subprocess.check_call(['npm', 'i', 'uber-licence'])

for pkg in PACKAGES:
    with chdir(os.path.join(ROOT, pkg)):
        ensure_license()
