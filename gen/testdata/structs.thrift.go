// Code generated by thriftrw

package testdata

import "github.com/thriftrw/thriftrw-go/wire"

type ContactInfo struct{ EmailAddress string }

func (v *ContactInfo) ToWire() wire.Value {
	var fs [1]wire.Field
	i := 0
	fs[i] = wire.Field{ID: 1, Value: wire.NewValueString(v.EmailAddress)}
	i++
	return wire.NewValueStruct(wire.Struct{Fields: fs[:i]})
}
func (v *ContactInfo) FromWire(w wire.Value) error {
	var err error
	for _, f := range w.GetStruct().Fields {
		switch f.ID {
		case 1:
			if f.Value.Type() == wire.TBinary {
				v.EmailAddress, err = f.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}
func _ContactInfo_Read(w wire.Value) (*ContactInfo, error) {
	var v ContactInfo
	err := v.FromWire(w)
	return &v, err
}

type _List_String_ValueList []string

func (v _List_String_ValueList) ForEach(f func(wire.Value) error) error {
	for _, x := range v {
		err := f(wire.NewValueString(x))
		if err != nil {
			return err
		}
	}
	return nil
}
func (v _List_String_ValueList) Close() {
}

type _Map_I64_Double_MapItemList map[int64]float64

func (m _Map_I64_Double_MapItemList) ForEach(f func(wire.MapItem) error) error {
	for k, v := range m {
		err := f(wire.MapItem{Key: wire.NewValueI64(k), Value: wire.NewValueDouble(v)})
		if err != nil {
			return err
		}
	}
	return nil
}
func (m _Map_I64_Double_MapItemList) Close() {
}

type _Set_I32_ValueList map[int32]struct{}

func (v _Set_I32_ValueList) ForEach(f func(wire.Value) error) error {
	for x := range v {
		err := f(wire.NewValueI32(x))
		if err != nil {
			return err
		}
	}
	return nil
}
func (v _Set_I32_ValueList) Close() {
}
func _List_String_Read(l wire.List) ([]string, error) {
	if l.ValueType != wire.TBinary {
		return nil, nil
	}
	o := make([]string, 0, l.Size)
	err := l.Items.ForEach(func(x wire.Value) error {
		i, err := x.GetString(), error(nil)
		if err != nil {
			return err
		}
		o = append(o, i)
		return nil
	})
	l.Items.Close()
	return o, err
}
func _Map_I64_Double_Read(m wire.Map) (map[int64]float64, error) {
	if m.KeyType != wire.TI64 {
		return nil, nil
	}
	if m.ValueType != wire.TDouble {
		return nil, nil
	}
	o := make(map[int64]float64, m.Size)
	err := m.Items.ForEach(func(x wire.MapItem) error {
		k, err := x.Key.GetI64(), error(nil)
		if err != nil {
			return err
		}
		v, err := x.Value.GetDouble(), error(nil)
		if err != nil {
			return err
		}
		o[k] = v
		return nil
	})
	m.Items.Close()
	return o, err
}
func _Set_I32_Read(s wire.Set) (map[int32]struct{}, error) {
	if s.ValueType != wire.TI32 {
		return nil, nil
	}
	o := make(map[int32]struct{}, s.Size)
	err := s.Items.ForEach(func(x wire.Value) error {
		i, err := x.GetI32(), error(nil)
		if err != nil {
			return err
		}
		o[i] = struct{}{}
		return nil
	})
	s.Items.Close()
	return o, err
}

type ContainersRequiredStruct struct {
	ListOfStrings      []string
	MapOfIntsToDoubles map[int64]float64
	SetOfInts          map[int32]struct{}
}

func (v *ContainersRequiredStruct) ToWire() wire.Value {
	var fs [3]wire.Field
	i := 0
	fs[i] = wire.Field{ID: 1, Value: wire.NewValueList(wire.List{ValueType: wire.TBinary, Size: len(v.ListOfStrings), Items: _List_String_ValueList(v.ListOfStrings)})}
	i++
	fs[i] = wire.Field{ID: 3, Value: wire.NewValueMap(wire.Map{KeyType: wire.TI64, ValueType: wire.TDouble, Size: len(v.MapOfIntsToDoubles), Items: _Map_I64_Double_MapItemList(v.MapOfIntsToDoubles)})}
	i++
	fs[i] = wire.Field{ID: 2, Value: wire.NewValueSet(wire.Set{ValueType: wire.TI32, Size: len(v.SetOfInts), Items: _Set_I32_ValueList(v.SetOfInts)})}
	i++
	return wire.NewValueStruct(wire.Struct{Fields: fs[:i]})
}
func (v *ContainersRequiredStruct) FromWire(w wire.Value) error {
	var err error
	for _, f := range w.GetStruct().Fields {
		switch f.ID {
		case 1:
			if f.Value.Type() == wire.TList {
				v.ListOfStrings, err = _List_String_Read(f.Value.GetList())
				if err != nil {
					return err
				}
			}
		case 3:
			if f.Value.Type() == wire.TMap {
				v.MapOfIntsToDoubles, err = _Map_I64_Double_Read(f.Value.GetMap())
				if err != nil {
					return err
				}
			}
		case 2:
			if f.Value.Type() == wire.TSet {
				v.SetOfInts, err = _Set_I32_Read(f.Value.GetSet())
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}
func _ContainersRequiredStruct_Read(w wire.Value) (*ContainersRequiredStruct, error) {
	var v ContainersRequiredStruct
	err := v.FromWire(w)
	return &v, err
}

type Frame struct {
	Size    *Size
	TopLeft *Point
}

func (v *Frame) ToWire() wire.Value {
	var fs [2]wire.Field
	i := 0
	fs[i] = wire.Field{ID: 2, Value: v.Size.ToWire()}
	i++
	fs[i] = wire.Field{ID: 1, Value: v.TopLeft.ToWire()}
	i++
	return wire.NewValueStruct(wire.Struct{Fields: fs[:i]})
}
func (v *Frame) FromWire(w wire.Value) error {
	var err error
	for _, f := range w.GetStruct().Fields {
		switch f.ID {
		case 2:
			if f.Value.Type() == wire.TStruct {
				v.Size, err = _Size_Read(f.Value)
				if err != nil {
					return err
				}
			}
		case 1:
			if f.Value.Type() == wire.TStruct {
				v.TopLeft, err = _Point_Read(f.Value)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}
func _Frame_Read(w wire.Value) (*Frame, error) {
	var v Frame
	err := v.FromWire(w)
	return &v, err
}

type Point struct {
	X float64
	Y float64
}

func (v *Point) ToWire() wire.Value {
	var fs [2]wire.Field
	i := 0
	fs[i] = wire.Field{ID: 1, Value: wire.NewValueDouble(v.X)}
	i++
	fs[i] = wire.Field{ID: 2, Value: wire.NewValueDouble(v.Y)}
	i++
	return wire.NewValueStruct(wire.Struct{Fields: fs[:i]})
}
func (v *Point) FromWire(w wire.Value) error {
	var err error
	for _, f := range w.GetStruct().Fields {
		switch f.ID {
		case 1:
			if f.Value.Type() == wire.TDouble {
				v.X, err = f.Value.GetDouble(), error(nil)
				if err != nil {
					return err
				}
			}
		case 2:
			if f.Value.Type() == wire.TDouble {
				v.Y, err = f.Value.GetDouble(), error(nil)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}
func _Point_Read(w wire.Value) (*Point, error) {
	var v Point
	err := v.FromWire(w)
	return &v, err
}

type PrimitiveOptionalStruct struct {
	BinaryField []byte
	BoolField   *bool
	ByteField   *int8
	DoubleField *float64
	Int16Field  *int16
	Int32Field  *int32
	Int64Field  *int64
	StringField *string
}

func (v *PrimitiveOptionalStruct) ToWire() wire.Value {
	var fs [8]wire.Field
	i := 0
	if v.BinaryField != nil {
		fs[i] = wire.Field{ID: 8, Value: wire.NewValueBinary(v.BinaryField)}
		i++
	}
	if v.BoolField != nil {
		fs[i] = wire.Field{ID: 1, Value: wire.NewValueBool(*v.BoolField)}
		i++
	}
	if v.ByteField != nil {
		fs[i] = wire.Field{ID: 2, Value: wire.NewValueI8(*v.ByteField)}
		i++
	}
	if v.DoubleField != nil {
		fs[i] = wire.Field{ID: 6, Value: wire.NewValueDouble(*v.DoubleField)}
		i++
	}
	if v.Int16Field != nil {
		fs[i] = wire.Field{ID: 3, Value: wire.NewValueI16(*v.Int16Field)}
		i++
	}
	if v.Int32Field != nil {
		fs[i] = wire.Field{ID: 4, Value: wire.NewValueI32(*v.Int32Field)}
		i++
	}
	if v.Int64Field != nil {
		fs[i] = wire.Field{ID: 5, Value: wire.NewValueI64(*v.Int64Field)}
		i++
	}
	if v.StringField != nil {
		fs[i] = wire.Field{ID: 7, Value: wire.NewValueString(*v.StringField)}
		i++
	}
	return wire.NewValueStruct(wire.Struct{Fields: fs[:i]})
}
func (v *PrimitiveOptionalStruct) FromWire(w wire.Value) error {
	var err error
	for _, f := range w.GetStruct().Fields {
		switch f.ID {
		case 8:
			if f.Value.Type() == wire.TBinary {
				v.BinaryField, err = f.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 1:
			if f.Value.Type() == wire.TBool {
				x, err := f.Value.GetBool(), error(nil)
				v.BoolField = &x
				if err != nil {
					return err
				}
			}
		case 2:
			if f.Value.Type() == wire.TI8 {
				x2, err := f.Value.GetI8(), error(nil)
				v.ByteField = &x2
				if err != nil {
					return err
				}
			}
		case 6:
			if f.Value.Type() == wire.TDouble {
				x3, err := f.Value.GetDouble(), error(nil)
				v.DoubleField = &x3
				if err != nil {
					return err
				}
			}
		case 3:
			if f.Value.Type() == wire.TI16 {
				x4, err := f.Value.GetI16(), error(nil)
				v.Int16Field = &x4
				if err != nil {
					return err
				}
			}
		case 4:
			if f.Value.Type() == wire.TI32 {
				x5, err := f.Value.GetI32(), error(nil)
				v.Int32Field = &x5
				if err != nil {
					return err
				}
			}
		case 5:
			if f.Value.Type() == wire.TI64 {
				x6, err := f.Value.GetI64(), error(nil)
				v.Int64Field = &x6
				if err != nil {
					return err
				}
			}
		case 7:
			if f.Value.Type() == wire.TBinary {
				x7, err := f.Value.GetString(), error(nil)
				v.StringField = &x7
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}
func _PrimitiveOptionalStruct_Read(w wire.Value) (*PrimitiveOptionalStruct, error) {
	var v PrimitiveOptionalStruct
	err := v.FromWire(w)
	return &v, err
}

type PrimitiveRequiredStruct struct {
	BinaryField []byte
	BoolField   bool
	ByteField   int8
	DoubleField float64
	Int16Field  int16
	Int32Field  int32
	Int64Field  int64
	StringField string
}

func (v *PrimitiveRequiredStruct) ToWire() wire.Value {
	var fs [8]wire.Field
	i := 0
	fs[i] = wire.Field{ID: 8, Value: wire.NewValueBinary(v.BinaryField)}
	i++
	fs[i] = wire.Field{ID: 1, Value: wire.NewValueBool(v.BoolField)}
	i++
	fs[i] = wire.Field{ID: 2, Value: wire.NewValueI8(v.ByteField)}
	i++
	fs[i] = wire.Field{ID: 6, Value: wire.NewValueDouble(v.DoubleField)}
	i++
	fs[i] = wire.Field{ID: 3, Value: wire.NewValueI16(v.Int16Field)}
	i++
	fs[i] = wire.Field{ID: 4, Value: wire.NewValueI32(v.Int32Field)}
	i++
	fs[i] = wire.Field{ID: 5, Value: wire.NewValueI64(v.Int64Field)}
	i++
	fs[i] = wire.Field{ID: 7, Value: wire.NewValueString(v.StringField)}
	i++
	return wire.NewValueStruct(wire.Struct{Fields: fs[:i]})
}
func (v *PrimitiveRequiredStruct) FromWire(w wire.Value) error {
	var err error
	for _, f := range w.GetStruct().Fields {
		switch f.ID {
		case 8:
			if f.Value.Type() == wire.TBinary {
				v.BinaryField, err = f.Value.GetBinary(), error(nil)
				if err != nil {
					return err
				}
			}
		case 1:
			if f.Value.Type() == wire.TBool {
				v.BoolField, err = f.Value.GetBool(), error(nil)
				if err != nil {
					return err
				}
			}
		case 2:
			if f.Value.Type() == wire.TI8 {
				v.ByteField, err = f.Value.GetI8(), error(nil)
				if err != nil {
					return err
				}
			}
		case 6:
			if f.Value.Type() == wire.TDouble {
				v.DoubleField, err = f.Value.GetDouble(), error(nil)
				if err != nil {
					return err
				}
			}
		case 3:
			if f.Value.Type() == wire.TI16 {
				v.Int16Field, err = f.Value.GetI16(), error(nil)
				if err != nil {
					return err
				}
			}
		case 4:
			if f.Value.Type() == wire.TI32 {
				v.Int32Field, err = f.Value.GetI32(), error(nil)
				if err != nil {
					return err
				}
			}
		case 5:
			if f.Value.Type() == wire.TI64 {
				v.Int64Field, err = f.Value.GetI64(), error(nil)
				if err != nil {
					return err
				}
			}
		case 7:
			if f.Value.Type() == wire.TBinary {
				v.StringField, err = f.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}
func _PrimitiveRequiredStruct_Read(w wire.Value) (*PrimitiveRequiredStruct, error) {
	var v PrimitiveRequiredStruct
	err := v.FromWire(w)
	return &v, err
}

type Size struct {
	Height float64
	Width  float64
}

func (v *Size) ToWire() wire.Value {
	var fs [2]wire.Field
	i := 0
	fs[i] = wire.Field{ID: 2, Value: wire.NewValueDouble(v.Height)}
	i++
	fs[i] = wire.Field{ID: 1, Value: wire.NewValueDouble(v.Width)}
	i++
	return wire.NewValueStruct(wire.Struct{Fields: fs[:i]})
}
func (v *Size) FromWire(w wire.Value) error {
	var err error
	for _, f := range w.GetStruct().Fields {
		switch f.ID {
		case 2:
			if f.Value.Type() == wire.TDouble {
				v.Height, err = f.Value.GetDouble(), error(nil)
				if err != nil {
					return err
				}
			}
		case 1:
			if f.Value.Type() == wire.TDouble {
				v.Width, err = f.Value.GetDouble(), error(nil)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}
func _Size_Read(w wire.Value) (*Size, error) {
	var v Size
	err := v.FromWire(w)
	return &v, err
}

type User struct {
	Contact *ContactInfo
	Name    string
}

func (v *User) ToWire() wire.Value {
	var fs [2]wire.Field
	i := 0
	if v.Contact != nil {
		fs[i] = wire.Field{ID: 2, Value: v.Contact.ToWire()}
		i++
	}
	fs[i] = wire.Field{ID: 1, Value: wire.NewValueString(v.Name)}
	i++
	return wire.NewValueStruct(wire.Struct{Fields: fs[:i]})
}
func (v *User) FromWire(w wire.Value) error {
	var err error
	for _, f := range w.GetStruct().Fields {
		switch f.ID {
		case 2:
			if f.Value.Type() == wire.TStruct {
				v.Contact, err = _ContactInfo_Read(f.Value)
				if err != nil {
					return err
				}
			}
		case 1:
			if f.Value.Type() == wire.TBinary {
				v.Name, err = f.Value.GetString(), error(nil)
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}
func _User_Read(w wire.Value) (*User, error) {
	var v User
	err := v.FromWire(w)
	return &v, err
}
